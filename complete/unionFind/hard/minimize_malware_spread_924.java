package complete.unionFind.hard;

import java.util.Arrays;

/**
 * @author karl.wy
 * @date 2019/05/22
 *
 * 尽量减少恶意软件的传播
 *
    在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。

    一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。

    假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。

    我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。

    请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。



    示例 1：

    输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
    输出：0
    示例 2：

    输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
    输出：0
    示例 3：

    输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
    输出：1


    提示：

    1 < graph.length = graph[0].length <= 300
    0 <= graph[i][j] == graph[j][i] <= 1
    graph[i][i] = 1
    1 <= initial.length < graph.length
    0 <= initial[i] < graph.length

 */
public class minimize_malware_spread_924 {
    private int[] p;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        p = new int[n];
        for (int i=0; i<n; i++) p[i]=i;
        for (int i=0; i<n; i++) {
            for (int j=i+1; j<n; j++) {
                if (graph[i][j]==1) union(i, j);
            }
        }
        int[] ufSize = new int[n];
        int[] malCount = new int[n];
        for (int i=0; i<n; i++) ufSize[find(i)]++;
        for (int init : initial) malCount[find(init)]++;
        int res = -1;
        int maxSize = 0;
        Arrays.sort(initial);
        for (int init : initial) {
            int idx = find(init);
            if (malCount[idx]==1 && ufSize[idx]>maxSize) {
                maxSize = ufSize[idx];
                res = init;
            }
        }
        if (maxSize!=0) return res;
        else return initial[0];
    }
    private int find(int i) {
        if (i!=p[i]) {
            p[i]=find(p[i]);
        }
        return p[i];
    }
    private void union(int i, int j) {
        int pi=find(i), pj=find(j);
        if (pi!=pj) p[pi]=pj;
    }
}
